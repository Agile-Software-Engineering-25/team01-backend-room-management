openapi: 3.0.0
info:
  title: Room Management API
  version: 0.2.0
  description: |
    API for managing buildings and rooms in the Provadis complex.
    Supports CRUD operations for buildings and rooms, room bookings, and availability inquiries.
servers:
  - url: https://api.provadis.com/v1
    description: Production server
paths:
  /buildings:
    get:
      summary: Get all buildings for the Provadis complex
      tags:
        - Buildings
      operationId: getBuildings
      responses:
        '200':
          description: List of all buildings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllBuildingsResponse'
    post:
      summary: Create a new building in the Provadis complex
      tags:
        - Buildings
      operationId: createBuilding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildingCreateRequest'
      responses:
        '201':
          description: Building created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          description: The building could not be created.
  /buildings/{buildingId}:
    parameters:
      - name: buildingId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: UUID of the building
    get:
      summary: Get building by ID
      tags:
        - Buildings
      operationId: getBuildingById
      responses:
        '200':
          description: The building with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '404':
          description: There is no building with the specified ID.
    put:
      summary: Updates an existing building by its ID.
      tags:
        - Buildings
      operationId: updateBuilding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildingCreateRequest'
      responses:
        '200':
          description: The building with the specified ID was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '404':
          description: There is no building with the specified ID.
    delete:
      summary: Delete building by ID.
      tags:
        - Buildings
      operationId: deleteBuilding
      responses:
        '204':
          description: Building deleted
        '400':
          description: Cannot delete building with existing rooms or bookings.
        '404':
          description: Not found
  /buildings/{buildingId}/rooms:
    get:
      summary: Get all rooms in a building
      tags:
        - Buildings
      operationId: getRoomsForBuilding
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the building
      responses:
        '200':
          description: List of rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        '404':
          description: Building not found
  /buildings/{buildingId}/bookings:
    get:
      summary: Get all bookings for a building on a specific date
      tags:
        - Buildings
      operationId: getBookingsForBuilding
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the building
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Date for which bookings are requested in ISO 8601 format (YYYY-MM-DD)
      responses:
        '200':
          description: List of bookings for the specified building on the specified date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllBookingsResponse'
        '400':
          description: Invalid date format or past date.
        '404':
          description: Building not found.
  /rooms:
    get:
      summary: Get all known rooms
      tags:
        - Rooms
      operationId: getRooms
      responses:
        '200':
          description: Success. Returns a list of all known rooms.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllRoomsResponse'
    post:
      summary: Create a new room
      tags:
        - Rooms
      operationId: createRoom
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomCreateRequest'
      responses:
        '201':
          description: Room created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Room creation failed.
  /rooms/inquiry:
    post:
      summary: Find all rooms that are available for a booking
      tags:
        - Rooms
      operationId: findAvailableRooms
      description: |
        Returns all rooms that are available for a booking based on the provided information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomInquiry'
      responses:
        '200':
          description: Success. Returns a list of rooms that are available for the specified booking.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        '400':
          description: Invalid request parameters.
  /rooms/{roomId}:
    get:
      summary: Get a specific room by ID
      tags:
        - Rooms
      operationId: getRoomById
      description: Returns details of a specific room identified by its UUID v7.
      parameters:
        - name: roomId
          in: path
          required: true
          description: The unique identifier of the room (UUID v7).
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success. Returns the details of the specified room.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: Room not found.
    put:
      summary: Update a specific room by ID
      tags:
        - Rooms
      operationId: updateRoomById
      description: Updates the details of a specific room identified by its UUID v7.
      parameters:
        - name: roomId
          in: path
          required: true
          description: The unique identifier of the room (UUID v7).
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomCreateRequest'
      responses:
        '200':
          description: Room updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Room update failed XYZ.
        '404':
          description: Room not found.
    delete:
      summary: Delete a specific room by ID
      tags:
        - Rooms
      operationId: deleteRoomById
      description: Deletes a specific room identified by its UUID v7.
      parameters:
        - name: roomId
          in: path
          required: true
          description: The unique identifier of the room (UUID v7).
          schema:
            type: string
            format: uuid
        - name: force
          in: query
          required: false
          description: Whether to force deletion even if the room has bookings assigned.
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: Room deleted successfully.
        '400':
          description: The room has bookings assigned and cannot be deleted.
        '404':
          description: Room not found.
  /rooms/{roomId}/deletable:
    get:
      summary: Checks whether a room can be deleted without force deleting.
      tags:
        - Rooms
      operationId: isRoomDeletable
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the room (UUID v7).
      responses:
        '200':
          description: Response whether the room can be deleted without forcing (no bookings assigned).
          content:
            application/json:
              schema:
                type: object
                properties:
                  deletable:
                    type: boolean
                required:
                  - deletable
        '404':
          description: Room not found.
  /rooms/{roomId}/bookings:
    get:
      summary: Get all bookings for a specific room on a specific date
      tags:
        - Rooms
      operationId: getBookingsForRoom
      description: Returns all bookings for a specific room on a specific date.
      parameters:
        - name: roomId
          in: path
          required: true
          description: The unique identifier of the room (UUID v7).
          schema:
            type: string
            format: uuid
        - name: date
          in: query
          required: true
          description: The date for which bookings are requested in ISO 8601 format (YYYY-MM-DD).
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Success. Returns a list of bookings for the specified room on the specified date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllBookingsResponse'
        '400':
          description: Requested bookings for a date in the past.
        '404':
          description: Room not found.
  /bookings:
    get:
      summary: Get all bookings
      tags:
        - Bookings
      operationId: getAllBookings
      description: Returns all bookings across all rooms.
      responses:
        '200':
          description: Success. Returns a list of all bookings.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
    post:
      summary: Try to book a room
      tags:
        - Bookings
      operationId: bookRoom
      description: Attempts to book a room based on the provided booking details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomBookingRequest'
      responses:
        '201':
          description: Booking created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          $ref: '#/components/responses/ProblemDetail'
        '404':
          description: Room not found.
        '409':
          description: Booking conflicts with existing bookings.
  /bookings/{bookingId}:
    get:
      summary: Get a specific booking by ID
      tags:
        - Bookings
      operationId: getBookingById
      description: Returns details of a specific booking identified by its UUID v7.
      parameters:
        - name: bookingId
          in: path
          required: true
          description: The unique identifier of the booking (UUID v7).
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success. Returns the details of the specified booking.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found.
    delete:
      summary: Cancel a specific booking by ID
      tags:
        - Bookings
      operationId: cancelBookingById
      description: Cancels a specific booking identified by its UUID v7.
      parameters:
        - name: bookingId
          in: path
          required: true
          description: The unique identifier of the booking (UUID v7).
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Booking cancelled successfully.
        '404':
          description: Booking not found.
components:
  responses:
    ProblemDetail:
      description: |
        A problem detail object that provides information about an error that occurred.
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: A short, human-readable summary of the problem.
              status:
                type: integer
                format: int32
                description: The HTTP status code generated by the origin server for this occurrence of the problem.
              detail:
                type: string
                description: A human-readable explanation specific to this occurrence of the problem.
              instance:
                type: string
                format: uri
                description: A URI reference that identifies the specific occurrence of the problem.
  schemas:
    GetAllBuildingsResponse:
      type: object
      properties:
        buildings:
          type: array
          items:
            $ref: '#/components/schemas/Building'
      required:
        - buildings
    Building:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for a building
        name:
          type: string
          description: Name of the building
          example: "Main Campus"
        address:
          type: string
          description: Street address of the building
          example: "Industriepark Höchst, Frankfurt am Main"
        description:
          type: string
          description: Description of the building
        state:
          $ref: '#/components/schemas/BuildingState'
      required:
        - id
        - name
        - address
        - state
    BuildingCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the building
        address:
          type: string
          description: Street address of the building
        description:
          type: string
          description: Description of the building
        state:
          $ref: '#/components/schemas/BuildingState'
      required:
        - name
        - address
        - state
    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        chemSymbol:
          type: string
        buildingId:
          type: string
          format: uuid
          description: The building this room belongs to
        characteristics:
          type: array
          items:
            $ref: '#/components/schemas/Characteristic'
      required:
        - id
        - name
        - chemSymbol
        - buildingId
        - characteristics
    RoomCreateRequest:
      type: object
      properties:
        name:
          type: string
        chemSymbol:
          type: string
        buildingId:
          type: string
          format: uuid
        characteristics:
          type: array
          items:
            $ref: '#/components/schemas/Characteristic'
      required:
        - name
        - chemSymbol
        - buildingId
        - characteristics
    Characteristic:
      type: object
      properties:
        type:
          type: string
          x-enum-varnames:
            - PROJECTOR
            - TELEVISION
            - SEATS
            - WHITEBOARD
        value:
          type: object
      required:
        - type
        - value
    SearchCharacteristic:
      allOf:
        - $ref: '#/components/schemas/Characteristic'
        - properties:
            operator:
              type: string
              enum:
                - EQUALS
                - NOT_EQUALS
                - GREATER_THAN
                - GREATER_THAN_OR_EQUAL
                - LESS_THAN
                - LESS_THAN_OR_EQUAL
      required:
        - type
        - value
        - operator
    RoomInquiry:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        groupId:
          type: string
          format: uuid
        characteristics:
          type: array
          items:
            $ref: '#/components/schemas/SearchCharacteristic'
      required:
        - startTime
        - endTime
        - groupId
        - characteristics
    RoomBookingRequest:
      type: object
      properties:
        roomId:
          type: string
          format: uuid
        lecturerIds:
          type: array
          uniqueItems: true
          items:
            type: string
            format: uuid
        studentGroupIds:
          type: array
          uniqueItems: true
          items:
            type: string
            format: uuid
        groupSize:
          type: integer
          minimum: 1
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
      required:
        - roomId
        - startTime
        - endTime
        - lecturerIds
        - studentGroupIds
    GetAllRoomsResponse:
      type: object
      properties:
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Room'
      required:
        - rooms
    GetAllBookingsResponse:
      type: object
      properties:
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/Booking'
      required:
        - bookings
    BuildingState:
      type: string
      description: Describes the operational state of a building.
      enum:
        - open
        - closed
    Booking:
      type: object
      properties:
        id:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
        lecturerIds:
          type: array
          uniqueItems: true
          items:
            type: string
            format: uuid
        studentGroupIds:
          type: array
          uniqueItems: true
          items:
            type: string
            format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
      required:
        - id
        - roomId
        - startTime
        - endTime
        - studentGroupIds
        - lecturerIds
